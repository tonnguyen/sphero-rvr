"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// This file is automatically generated!
// Toy Name:           Sphero RVR
// Prefix:             RV
// Command Count:      65
// Timestamp:          10/12/2019 @ 01:53:07.267881 (UTC)
var byte_conversion_utilities_1 = require("../utilities/byte-conversion-utilities");
var led_control_1 = require("./controls/led-control");
var drive_control_1 = require("./controls/drive-control");
var infrared_control_1 = require("./controls/infrared-control");
var sensor_control_1 = require("./controls/sensor-control");
var SpheroRvrToy = /** @class */ (function () {
    function SpheroRvrToy(ipAddress, port) {
        var _this = this;
        this._baseUrl = 'http://' + ipAddress + ':' + port + '/api' + '/v1.0';
        this._asyncHandlerByName = new Map();
        var socket = new WebSocket('ws://' + ipAddress + ':' + port + '/stream');
        socket.onopen = function () {
            socket.send('Hello from client!');
        };
        socket.onmessage = function (e) {
            var asyncCommand = JSON.parse(e.data);
            var key = _this.getAsyncMapKey(asyncCommand._sourceId, asyncCommand._deviceId, asyncCommand._commandId);
            var handler = _this.asyncHandlerByName.get(key);
            if (handler == undefined) {
                return;
            }
            handler(asyncCommand._data);
        };
        this._ledControl = new led_control_1.LedControl(this);
        this._driveControl = new drive_control_1.DriveControl(this);
        this._infraredControl = new infrared_control_1.InfraredControl(this);
        this._sensorControl = new sensor_control_1.SensorControl(this);
    }
    Object.defineProperty(SpheroRvrToy.prototype, "baseUrl", {
        get: function () {
            return this._baseUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpheroRvrToy.prototype, "asyncHandlerByName", {
        get: function () {
            return this._asyncHandlerByName;
        },
        enumerable: true,
        configurable: true
    });
    SpheroRvrToy.prototype.getAsyncMapKey = function (sourceId, deviceId, commandId) {
        return sourceId + ", " + byte_conversion_utilities_1.ByteConversionUtilities.convertNumberToHexString(deviceId) + ", " + byte_conversion_utilities_1.ByteConversionUtilities.convertNumberToHexString(commandId);
    };
    /**
     * Retrieve LedControl object
     * @returns LedControl object with which to interact with RVR
     */
    SpheroRvrToy.prototype.getLedControl = function () {
        return this._ledControl;
    };
    /**
     * Retrieve DriveControl object
     * @returns DriveControl object with which to interact with RVR
     */
    SpheroRvrToy.prototype.getDriveControl = function () {
        return this._driveControl;
    };
    /**
     * Retrieve InfraredControl object
     * @returns InfraredControl object with which to interact with RVR
     */
    SpheroRvrToy.prototype.getInfraredControl = function () {
        return this._infraredControl;
    };
    /**
     * Retrieve SensorControl object
     * @returns SensorControl object with which to interact with RVR
     */
    SpheroRvrToy.prototype.getSensorControl = function () {
        return this._sensorControl;
    };
    /**
     * Echo back the payload data (zero data is equivalent to a ping).
     * @param data - Payload data to be echoed as an integer between 0 and 255.
     * @param targetId - Processor target Id to send command to.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.echo = function (data, targetId) {
        var url = this._baseUrl + "/apiAndShell/echo/" + targetId;
        var jsonBody = {
            'data': data,
            'isResponseRequested': false
        };
        return fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Gets the version of the main application.
     * @param targetId - Processor target Id to send command to.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getMainApplicationVersion = function (targetId) {
        var url = this._baseUrl + "/systemInfo/getMainApplicationVersion/" + targetId;
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Gets the version of the bootloader.
     * @param targetId - Processor target Id to send command to.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBootloaderVersion = function (targetId) {
        var url = this._baseUrl + "/systemInfo/getBootloaderVersion/" + targetId;
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Gets the board revision number.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBoardRevision = function () {
        var url = this._baseUrl + "/systemInfo/getBoardRevision/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Gets the robot's MAC address.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getMacAddress = function () {
        var url = this._baseUrl + "/systemInfo/getMacAddress/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Gets the id number assigned by the company for activation tracking.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getStatsId = function () {
        var url = this._baseUrl + "/systemInfo/getStatsId/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Returns the processor name string (as specified to the System Info module). If no name is specified, returns an empty string or no string.
     * @param targetId - Processor target Id to send command to.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getProcessorName = function (targetId) {
        var url = this._baseUrl + "/systemInfo/getProcessorName/" + targetId;
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Returns the SKU of the bot.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getSku = function () {
        var url = this._baseUrl + "/systemInfo/getSku/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Returns the time (in milliseconds) that has passed since the latest power cycle started.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getCoreUpTimeInMilliseconds = function () {
        var url = this._baseUrl + "/systemInfo/getCoreUpTimeInMilliseconds/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Put robot into a soft sleep state. Driving, LEDS, and sensors are disabled.
     */
    SpheroRvrToy.prototype.sleep = function () {
        var url = this._baseUrl + "/power/sleep/1";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Wake up the system from soft sleep. Nothing to do if awake.
     */
    SpheroRvrToy.prototype.wake = function () {
        var url = this._baseUrl + "/power/wake/1";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Get usable battery percentage remaining.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBatteryPercentage = function () {
        var url = this._baseUrl + "/power/getBatteryPercentage/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Returns the current battery state
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBatteryVoltageState = function () {
        var url = this._baseUrl + "/power/getBatteryVoltageState/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Notification triggered 10 seconds before soft/deep sleep.
     * @param handler - Function called upon receiving corresponding async command; takes form handler()
     */
    SpheroRvrToy.prototype.onWillSleepNotify = function (handler) {
        this.asyncHandlerByName.set('1, 0x13, 0x19', handler);
    };
    /**
     * Notification triggered when robot has entered soft/deep sleep.
     * @param handler - Function called upon receiving corresponding async command; takes form handler()
     */
    SpheroRvrToy.prototype.onDidSleepNotify = function (handler) {
        this.asyncHandlerByName.set('1, 0x13, 0x1A', handler);
    };
    /**
     * Enables or disables notifications for changes to battery voltage state.
     */
    SpheroRvrToy.prototype.enableBatteryVoltageStateChangeNotify = function (isEnabled) {
        var url = this._baseUrl + "/power/enableBatteryVoltageStateChangeNotify/1";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Notification for battery voltage state change.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onBatteryVoltageStateChangeNotify = function (handler) {
        this.asyncHandlerByName.set('1, 0x13, 0x1C', handler);
    };
    /**
     * Returns the most recent battery voltage reading in volts. This results in a 'Command Failed' API error if the platform does not support calibration. Note that this command does not get a new voltage reading; it returns the most recently read value, which is updated once per second on most robots. To force the battery system to read a new value, use the 'Force Battery Refresh' command.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBatteryVoltageInVolts = function (readingType) {
        var url = this._baseUrl + "/power/getBatteryVoltageInVolts/1";
        var jsonBody = {
            'readingType': readingType,
            'isResponseRequested': false
        };
        return fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Returns the battery voltage state thresholds and hysteresis value. The hysteresis value is added to the thresholds for rising voltages -- e.g., the voltage must be less than the low threshold to change the state to 'low battery' but it must be greater than (low threshold + hysteresis) to go back to the 'ok battery' state.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBatteryVoltageStateThresholds = function () {
        var url = this._baseUrl + "/power/getBatteryVoltageStateThresholds/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Get the current draw, in AMPS, from a current sense amplifier
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getCurrentSenseAmplifierCurrent = function (amplifierId) {
        var url = this._baseUrl + "/power/getCurrentSenseAmplifierCurrent/1";
        var jsonBody = {
            'amplifierId': amplifierId,
            'isResponseRequested': false
        };
        return fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Run left and right motors at a speed between 0 and 255. Set driving mode using flags.
     */
    SpheroRvrToy.prototype.rawMotors = function (leftMode, leftSpeed, rightMode, rightSpeed) {
        var url = this._baseUrl + "/drive/rawMotors/2";
        var jsonBody = {
            'leftMode': leftMode,
            'leftSpeed': leftSpeed,
            'rightMode': rightMode,
            'rightSpeed': rightSpeed,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Sets current yaw angle to zero. (ie current direction is now considered 'forward'.)
     */
    SpheroRvrToy.prototype.resetYaw = function () {
        var url = this._baseUrl + "/drive/resetYaw/2";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Drive towards a heading at a particular speed. Flags can be set to modify driving mode.
     */
    SpheroRvrToy.prototype.driveWithHeading = function (speed, heading, flags) {
        var url = this._baseUrl + "/drive/driveWithHeading/2";
        var jsonBody = {
            'speed': speed,
            'heading': heading,
            'flags': flags,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Enables motor stall notifications.
     */
    SpheroRvrToy.prototype.enableMotorStallNotify = function (isEnabled) {
        var url = this._baseUrl + "/drive/enableMotorStallNotify/2";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Motor stall protection change notification.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onMotorStallNotify = function (handler) {
        this.asyncHandlerByName.set('2, 0x16, 0x26', handler);
    };
    /**
     * Enables notification for when there is a motor fault.
     */
    SpheroRvrToy.prototype.enableMotorFaultNotify = function (isEnabled) {
        var url = this._baseUrl + "/drive/enableMotorFaultNotify/2";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Notification that a motor fault has occurred.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onMotorFaultNotify = function (handler) {
        this.asyncHandlerByName.set('2, 0x16, 0x28', handler);
    };
    /**
     * Get the motor fault state.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getMotorFaultState = function () {
        var url = this._baseUrl + "/drive/getMotorFaultState/2";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Enables the Async messages for when the Gyro max is hit.
     */
    SpheroRvrToy.prototype.enableGyroMaxNotify = function (isEnabled) {
        var url = this._baseUrl + "/sensor/enableGyroMaxNotify/2";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Occurs when the robot spins faster than the sensor can see in any axis.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onGyroMaxNotify = function (handler) {
        this.asyncHandlerByName.set('2, 0x18, 0x10', handler);
    };
    /**
     * Resets the locator module's current X and Y values to 0.
     */
    SpheroRvrToy.prototype.resetLocatorXAndY = function () {
        var url = this._baseUrl + "/sensor/resetLocatorXAndY/2";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Sets flags for the locator module.
     */
    SpheroRvrToy.prototype.setLocatorFlags = function (flags) {
        var url = this._baseUrl + "/sensor/setLocatorFlags/2";
        var jsonBody = {
            'flags': flags,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * An 8-bit value is returned for each infrared sensor, assigned by mask.
     Mask description on BOLT: 32'h0000_00ff: front left sensor 32'h0000_ff00: front right sensor 32'h00ff_0000: back right sensor 32'hff00_0000: back left sensor
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBotToBotInfraredReadings = function () {
        var url = this._baseUrl + "/sensor/getBotToBotInfraredReadings/2";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Return raw data being read by RGBC sensor on each sensor channel
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getRgbcSensorValues = function () {
        var url = this._baseUrl + "/sensor/getRgbcSensorValues/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * For robot following, broadcasting robots emit two codes: one for long distance (3 meters +), and one for short distance (< 1 meter). Following robots use both of these codes to determine direction and distance from the broadcasting robot.
     */
    SpheroRvrToy.prototype.startRobotToRobotInfraredBroadcasting = function (farCode, nearCode) {
        var url = this._baseUrl + "/sensor/startRobotToRobotInfraredBroadcasting/2";
        var jsonBody = {
            'farCode': farCode,
            'nearCode': nearCode,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Registers a far code and near code for a following robot to follow. Following robots use the far code and near code emitted by a broadcaster bot to determine direction and distance to travel.
     */
    SpheroRvrToy.prototype.startRobotToRobotInfraredFollowing = function (farCode, nearCode) {
        var url = this._baseUrl + "/sensor/startRobotToRobotInfraredFollowing/2";
        var jsonBody = {
            'farCode': farCode,
            'nearCode': nearCode,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Halts current broadcasting or following. De-registers far code and near code on broadcasting or following robot.
     */
    SpheroRvrToy.prototype.stopRobotToRobotInfraredBroadcasting = function () {
        var url = this._baseUrl + "/sensor/stopRobotToRobotInfraredBroadcasting/2";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Async sent when a registered robot to robot infrared message is received. In response returns the infrared code listened for.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onRobotToRobotInfraredMessageReceivedNotify = function (handler) {
        this.asyncHandlerByName.set('2, 0x18, 0x2C', handler);
    };
    /**
     * Ambient light value is returned; higher = more light!
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getAmbientLightSensorValue = function () {
        var url = this._baseUrl + "/sensor/getAmbientLightSensorValue/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Halts current following. De-registers far code and near code on following robot.
     */
    SpheroRvrToy.prototype.stopRobotToRobotInfraredFollowing = function () {
        var url = this._baseUrl + "/sensor/stopRobotToRobotInfraredFollowing/2";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Registers a far code and near code for a evading robot to evade. Evading robots use the far code and near code emitted by a broadcaster bot to determine direction and distance to travel.
     */
    SpheroRvrToy.prototype.startRobotToRobotInfraredEvading = function (farCode, nearCode) {
        var url = this._baseUrl + "/sensor/startRobotToRobotInfraredEvading/2";
        var jsonBody = {
            'farCode': farCode,
            'nearCode': nearCode,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Halts current evading. De-registers far code and near code on evading robot.
     */
    SpheroRvrToy.prototype.stopRobotToRobotInfraredEvading = function () {
        var url = this._baseUrl + "/sensor/stopRobotToRobotInfraredEvading/2";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Enable or disable asynchronous color detection notifications. The user must provide an interval and a confidence threshold
     */
    SpheroRvrToy.prototype.enableColorDetectionNotify = function (isEnabled, interval, minimumConfidenceThreshold) {
        var url = this._baseUrl + "/sensor/enableColorDetectionNotify/1";
        var jsonBody = {
            'isEnabled': isEnabled,
            'interval': interval,
            'minimumConfidenceThreshold': minimumConfidenceThreshold,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Notification sent on the interval set by the user in enable_color_detection_notification with information about the color detected.  The color classification ID 0xFF is a special value indicating that the color could not be identified (e.g., because the reading was too dark).  This is expected behavior when the ring is tapped in the air with the sensor facing out.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onColorDetectionNotify = function (handler) {
        this.asyncHandlerByName.set('1, 0x18, 0x36', handler);
    };
    /**
     * Note: this does not return anything.  Instead, a color_detection_notify async will be sent after measurement with the answer.
     */
    SpheroRvrToy.prototype.getCurrentDetectedColorReading = function () {
        var url = this._baseUrl + "/sensor/getCurrentDetectedColorReading/1";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Enables the color detection module.
     */
    SpheroRvrToy.prototype.enableColorDetection = function (isEnabled) {
        var url = this._baseUrl + "/sensor/enableColorDetection/1";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Configure streaming services.
     * @param token
     * @param configuration - Array containing the configuration of the client, like the service ID and size.
     * @param targetId - Processor target Id to send command to.
     */
    SpheroRvrToy.prototype.configureStreamingService = function (token, configuration, targetId) {
        var url = this._baseUrl + "/sensor/configureStreamingService/" + targetId;
        var jsonBody = {
            'token': token,
            'configuration': configuration,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Start all streaming services for a client
     * @param period - Interval between sensor streaming packets in milliseconds.
     * @param targetId - Processor target Id to send command to.
     */
    SpheroRvrToy.prototype.startStreamingService = function (period, targetId) {
        var url = this._baseUrl + "/sensor/startStreamingService/" + targetId;
        var jsonBody = {
            'period': period,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Stops all streaming services for a client
     * @param targetId - Processor target Id to send command to.
     */
    SpheroRvrToy.prototype.stopStreamingService = function (targetId) {
        var url = this._baseUrl + "/sensor/stopStreamingService/" + targetId;
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Clears all streaming services for a client
     * @param targetId - Processor target Id to send command to.
     */
    SpheroRvrToy.prototype.clearStreamingService = function (targetId) {
        var url = this._baseUrl + "/sensor/clearStreamingService/" + targetId;
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    /**
     * Streaming data notification for a client configuration
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onStreamingServiceDataNotify = function (handler) {
        this.asyncHandlerByName.set('1, 0x18, 0x3D', handler);
        this.asyncHandlerByName.set('2, 0x18, 0x3D', handler);
    };
    /**
     * Starts listening for infrared messages sent to the robot and will send an async message when received.
     */
    SpheroRvrToy.prototype.enableRobotInfraredMessageNotify = function (isEnabled) {
        var url = this._baseUrl + "/sensor/enableRobotInfraredMessageNotify/2";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Send specified code to any robot in the vicinity. The on/off for each sensor is controlled individually but there can only be one range for all sensors. Therefore, the acceptable combination of emitters strength would be: 5, 5, 0, 0 or 5, 5, 5, 5 or 0, 0, 0, 5, etc.
     */
    SpheroRvrToy.prototype.sendInfraredMessage = function (infraredCode, frontStrength, leftStrength, rightStrength, rearStrength) {
        var url = this._baseUrl + "/sensor/sendInfraredMessage/2";
        var jsonBody = {
            'infraredCode': infraredCode,
            'frontStrength': frontStrength,
            'leftStrength': leftStrength,
            'rightStrength': rightStrength,
            'rearStrength': rearStrength,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Get the motor temperature (calculated from motor current) for given a motor index.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getMotorTemperature = function (motorIndex) {
        var url = this._baseUrl + "/sensor/getMotorTemperature/2";
        var jsonBody = {
            'motorIndex': motorIndex,
            'isResponseRequested': false
        };
        return fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Get motor thermal protection status.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getMotorThermalProtectionStatus = function () {
        var url = this._baseUrl + "/sensor/getMotorThermalProtectionStatus/2";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Enable motor thermal protection status notifications.
     */
    SpheroRvrToy.prototype.enableMotorThermalProtectionStatusNotify = function (isEnabled) {
        var url = this._baseUrl + "/sensor/enableMotorThermalProtectionStatusNotify/2";
        var jsonBody = {
            'isEnabled': isEnabled,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Motor thermal protection status notification.
     * @param handler - Function called upon receiving corresponding async command; takes form handler(data)
     */
    SpheroRvrToy.prototype.onMotorThermalProtectionStatusNotify = function (handler) {
        this.asyncHandlerByName.set('2, 0x18, 0x4D', handler);
    };
    /**
     * Returns null-terminated string with the BLE advertising name (e.g., "BL-ABCD").
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getBluetoothAdvertisingName = function () {
        var url = this._baseUrl + "/connection/getBluetoothAdvertisingName/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * LED affected mask can affect up to 32 LEDs simultaneously. 0 = not affected. 1 = affected (update this LED). If mask value is set to 1, you must provide a value in the LED data array.
     */
    SpheroRvrToy.prototype.setAllLeds = function (ledGroup, ledBrightnessValues) {
        var url = this._baseUrl + "/io/setAllLeds/1";
        var jsonBody = {
            'ledGroup': ledGroup,
            'ledBrightnessValues': ledBrightnessValues,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * The response data will list all assigned color palette slots in the system.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getActiveColorPalette = function () {
        var url = this._baseUrl + "/io/getActiveColorPalette/1";
        return fetch(url, {
            method: 'GET',
            headers: {
                'accept': 'application/json',
            }
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Each entry in the array corresponds to one color slot in the system.  Any unmentioned slot indices will be marked unassigned.
     */
    SpheroRvrToy.prototype.setActiveColorPalette = function (rgbIndexBytes) {
        var url = this._baseUrl + "/io/setActiveColorPalette/1";
        var jsonBody = {
            'rgbIndexBytes': rgbIndexBytes,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * The response to this command will provide an array of color palette entries that would match on the provided color with higher confidence than the given threshold.
     * @returns Promise that resolves with the response from RVR for given command
     */
    SpheroRvrToy.prototype.getColorIdentificationReport = function (red, green, blue, confidenceThreshold) {
        var url = this._baseUrl + "/io/getColorIdentificationReport/1";
        var jsonBody = {
            'red': red,
            'green': green,
            'blue': blue,
            'confidenceThreshold': confidenceThreshold,
            'isResponseRequested': false
        };
        return fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        }).then(function (response) {
            return response.text();
        }).then(function (text) {
            return text;
        });
    };
    /**
     * Loads the specified color palette into the active palette.
     */
    SpheroRvrToy.prototype.loadColorPalette = function (paletteIndex) {
        var url = this._baseUrl + "/io/loadColorPalette/1";
        var jsonBody = {
            'paletteIndex': paletteIndex,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Stores the active palette into the palette at palette index (see table above).
     */
    SpheroRvrToy.prototype.saveColorPalette = function (paletteIndex) {
        var url = this._baseUrl + "/io/saveColorPalette/1";
        var jsonBody = {
            'paletteIndex': paletteIndex,
            'isResponseRequested': false
        };
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonBody)
        });
    };
    /**
     * Releases LED requests to show the idle indication.
     */
    SpheroRvrToy.prototype.releaseLedRequests = function () {
        var url = this._baseUrl + "/io/releaseLedRequests/1";
        fetch(url, {
            method: 'PUT',
            headers: {
                'accept': 'application/json',
            }
        });
    };
    SpheroRvrToy.primaryTarget = 1;
    SpheroRvrToy.secondaryTarget = 2;
    return SpheroRvrToy;
}());
exports.SpheroRvrToy = SpheroRvrToy;
var IoSpecdrumsColorPaletteIndiciesEnum = /** @class */ (function () {
    function IoSpecdrumsColorPaletteIndiciesEnum() {
    }
    IoSpecdrumsColorPaletteIndiciesEnum.default = 0;
    IoSpecdrumsColorPaletteIndiciesEnum.midi = 1;
    return IoSpecdrumsColorPaletteIndiciesEnum;
}());
exports.IoSpecdrumsColorPaletteIndiciesEnum = IoSpecdrumsColorPaletteIndiciesEnum;
var DriveRawMotorModesEnum = /** @class */ (function () {
    function DriveRawMotorModesEnum() {
    }
    DriveRawMotorModesEnum.off = 0;
    DriveRawMotorModesEnum.forward = 1;
    DriveRawMotorModesEnum.reverse = 2;
    return DriveRawMotorModesEnum;
}());
exports.DriveRawMotorModesEnum = DriveRawMotorModesEnum;
var DriveMotorIndexesEnum = /** @class */ (function () {
    function DriveMotorIndexesEnum() {
    }
    DriveMotorIndexesEnum.leftMotorIndex = 0;
    DriveMotorIndexesEnum.rightMotorIndex = 1;
    return DriveMotorIndexesEnum;
}());
exports.DriveMotorIndexesEnum = DriveMotorIndexesEnum;
var SensorMotorIndexesEnum = /** @class */ (function () {
    function SensorMotorIndexesEnum() {
    }
    SensorMotorIndexesEnum.leftMotorIndex = 0;
    SensorMotorIndexesEnum.rightMotorIndex = 1;
    return SensorMotorIndexesEnum;
}());
exports.SensorMotorIndexesEnum = SensorMotorIndexesEnum;
var SensorThermalProtectionStatusEnum = /** @class */ (function () {
    function SensorThermalProtectionStatusEnum() {
    }
    SensorThermalProtectionStatusEnum.ok = 0;
    SensorThermalProtectionStatusEnum.warn = 1;
    SensorThermalProtectionStatusEnum.critical = 2;
    return SensorThermalProtectionStatusEnum;
}());
exports.SensorThermalProtectionStatusEnum = SensorThermalProtectionStatusEnum;
var SensorStreamingDataSizesEnum = /** @class */ (function () {
    function SensorStreamingDataSizesEnum() {
    }
    SensorStreamingDataSizesEnum.eightBit = 0x00;
    SensorStreamingDataSizesEnum.sixteenBit = 0x01;
    SensorStreamingDataSizesEnum.thirtyTwoBit = 0x02;
    return SensorStreamingDataSizesEnum;
}());
exports.SensorStreamingDataSizesEnum = SensorStreamingDataSizesEnum;
var PowerBatteryVoltageStatesEnum = /** @class */ (function () {
    function PowerBatteryVoltageStatesEnum() {
    }
    PowerBatteryVoltageStatesEnum.unknown = 0;
    PowerBatteryVoltageStatesEnum.ok = 1;
    PowerBatteryVoltageStatesEnum.low = 2;
    PowerBatteryVoltageStatesEnum.critical = 3;
    return PowerBatteryVoltageStatesEnum;
}());
exports.PowerBatteryVoltageStatesEnum = PowerBatteryVoltageStatesEnum;
var PowerBatteryVoltageReadingTypesEnum = /** @class */ (function () {
    function PowerBatteryVoltageReadingTypesEnum() {
    }
    PowerBatteryVoltageReadingTypesEnum.calibratedAndFiltered = 0;
    PowerBatteryVoltageReadingTypesEnum.calibratedAndUnfiltered = 1;
    PowerBatteryVoltageReadingTypesEnum.uncalibratedAndUnfiltered = 2;
    return PowerBatteryVoltageReadingTypesEnum;
}());
exports.PowerBatteryVoltageReadingTypesEnum = PowerBatteryVoltageReadingTypesEnum;
var PowerAmplifierIdsEnum = /** @class */ (function () {
    function PowerAmplifierIdsEnum() {
    }
    PowerAmplifierIdsEnum.leftMotor = 0;
    PowerAmplifierIdsEnum.rightMotor = 1;
    return PowerAmplifierIdsEnum;
}());
exports.PowerAmplifierIdsEnum = PowerAmplifierIdsEnum;
var DriveDriveFlagsBitmask = /** @class */ (function () {
    function DriveDriveFlagsBitmask() {
    }
    DriveDriveFlagsBitmask.none = 0;
    DriveDriveFlagsBitmask.driveReverse = 1;
    DriveDriveFlagsBitmask.boost = 2;
    DriveDriveFlagsBitmask.fastTurn = 4;
    DriveDriveFlagsBitmask.leftDirection = 8;
    DriveDriveFlagsBitmask.rightDirection = 16;
    DriveDriveFlagsBitmask.enableDrift = 32;
    return DriveDriveFlagsBitmask;
}());
exports.DriveDriveFlagsBitmask = DriveDriveFlagsBitmask;
var SensorGyroMaxFlagsBitmask = /** @class */ (function () {
    function SensorGyroMaxFlagsBitmask() {
    }
    SensorGyroMaxFlagsBitmask.none = 0;
    SensorGyroMaxFlagsBitmask.maxPlusX = 1;
    SensorGyroMaxFlagsBitmask.maxMinusX = 2;
    SensorGyroMaxFlagsBitmask.maxPlusY = 4;
    SensorGyroMaxFlagsBitmask.maxMinusY = 8;
    SensorGyroMaxFlagsBitmask.maxPlusZ = 16;
    SensorGyroMaxFlagsBitmask.maxMinusZ = 32;
    return SensorGyroMaxFlagsBitmask;
}());
exports.SensorGyroMaxFlagsBitmask = SensorGyroMaxFlagsBitmask;
var SensorLocatorFlagsBitmask = /** @class */ (function () {
    function SensorLocatorFlagsBitmask() {
    }
    SensorLocatorFlagsBitmask.none = 0;
    SensorLocatorFlagsBitmask.autoCalibrate = 1;
    return SensorLocatorFlagsBitmask;
}());
exports.SensorLocatorFlagsBitmask = SensorLocatorFlagsBitmask;
var SensorInfraredSensorLocationsBitmask = /** @class */ (function () {
    function SensorInfraredSensorLocationsBitmask() {
    }
    SensorInfraredSensorLocationsBitmask.none = 0;
    SensorInfraredSensorLocationsBitmask.frontLeft = 0x000000FF;
    SensorInfraredSensorLocationsBitmask.frontRight = 0x0000FF00;
    SensorInfraredSensorLocationsBitmask.backRight = 0x00FF0000;
    SensorInfraredSensorLocationsBitmask.backLeft = 0xFF000000;
    return SensorInfraredSensorLocationsBitmask;
}());
exports.SensorInfraredSensorLocationsBitmask = SensorInfraredSensorLocationsBitmask;
var SpheroRvrLedBitmasks = /** @class */ (function () {
    function SpheroRvrLedBitmasks() {
    }
    SpheroRvrLedBitmasks.rightHeadlightRed = 0x00000001;
    SpheroRvrLedBitmasks.rightHeadlightGreen = 0x00000002;
    SpheroRvrLedBitmasks.rightHeadlightBlue = 0x00000004;
    SpheroRvrLedBitmasks.leftHeadlightRed = 0x00000008;
    SpheroRvrLedBitmasks.leftHeadlightGreen = 0x00000010;
    SpheroRvrLedBitmasks.leftHeadlightBlue = 0x00000020;
    SpheroRvrLedBitmasks.leftStatusIndicationRed = 0x00000040;
    SpheroRvrLedBitmasks.leftStatusIndicationGreen = 0x00000080;
    SpheroRvrLedBitmasks.leftStatusIndicationBlue = 0x00000100;
    SpheroRvrLedBitmasks.rightStatusIndicationRed = 0x00000200;
    SpheroRvrLedBitmasks.rightStatusIndicationGreen = 0x00000400;
    SpheroRvrLedBitmasks.rightStatusIndicationBlue = 0x00000800;
    SpheroRvrLedBitmasks.batteryDoorRearRed = 0x00001000;
    SpheroRvrLedBitmasks.batteryDoorRearGreen = 0x00002000;
    SpheroRvrLedBitmasks.batteryDoorRearBlue = 0x00004000;
    SpheroRvrLedBitmasks.batteryDoorFrontRed = 0x00008000;
    SpheroRvrLedBitmasks.batteryDoorFrontGreen = 0x00010000;
    SpheroRvrLedBitmasks.batteryDoorFrontBlue = 0x00020000;
    SpheroRvrLedBitmasks.powerButtonFrontRed = 0x00040000;
    SpheroRvrLedBitmasks.powerButtonFrontGreen = 0x00080000;
    SpheroRvrLedBitmasks.powerButtonFrontBlue = 0x00100000;
    SpheroRvrLedBitmasks.powerButtonRearRed = 0x00200000;
    SpheroRvrLedBitmasks.powerButtonRearGreen = 0x00400000;
    SpheroRvrLedBitmasks.powerButtonRearBlue = 0x00800000;
    SpheroRvrLedBitmasks.leftBrakelightRed = 0x01000000;
    SpheroRvrLedBitmasks.leftBrakelightGreen = 0x02000000;
    SpheroRvrLedBitmasks.leftBrakelightBlue = 0x04000000;
    SpheroRvrLedBitmasks.rightBrakelightRed = 0x08000000;
    SpheroRvrLedBitmasks.rightBrakelightGreen = 0x10000000;
    SpheroRvrLedBitmasks.rightBrakelightBlue = 0x20000000;
    SpheroRvrLedBitmasks.undercarriageWhite = 0x40000000;
    return SpheroRvrLedBitmasks;
}());
exports.SpheroRvrLedBitmasks = SpheroRvrLedBitmasks;
var RvrLedGroups = /** @class */ (function () {
    function RvrLedGroups() {
    }
    RvrLedGroups.rightHeadlight = 0x00000007;
    RvrLedGroups.leftHeadlight = 0x00000038;
    RvrLedGroups.leftStatusIndication = 0x000001c0;
    RvrLedGroups.rightStatusIndication = 0x00000e00;
    RvrLedGroups.batteryDoorRear = 0x00007000;
    RvrLedGroups.batteryDoorFront = 0x00038000;
    RvrLedGroups.powerButtonFront = 0x001c0000;
    RvrLedGroups.powerButtonRear = 0x00e00000;
    RvrLedGroups.leftBrakelight = 0x07000000;
    RvrLedGroups.rightBrakelight = 0x38000000;
    RvrLedGroups.undercarriage = 0x40000000;
    RvrLedGroups.allLights = 0x3fffffff;
    return RvrLedGroups;
}());
exports.RvrLedGroups = RvrLedGroups;
//# sourceMappingURL=sphero-rvr-toy.js.map